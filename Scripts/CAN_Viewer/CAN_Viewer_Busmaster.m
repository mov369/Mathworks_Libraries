%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\maxju\Documents\Customer Support\Monash University\env200 log file2.log
%
% To extend the code to different selected data or a different text file, generate a function instead of a script.

% Auto-generated by MATLAB on 2023/07/06 09:35:02

%% Initialize variables.
filename = 'C:\Users\maxju\Documents\Customer Support\Monash University\env200 log file2.log';
startRow = 15;

%% Format for each line of text:
%   column1: text (%s)
%	column4: text (%s)
%   column7: text (%s)
%	column8: text (%s)
%   column9: text (%s)
%	column10: text (%s)
%   column11: text (%s)
%	column12: text (%s)
%   column13: text (%s)
%	column14: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%13s%*3*s%*5s%3s%*2*s%*2s%3s%3s%3s%3s%3s%3s%3s%3s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow-1, 'WhiteSpace', '', 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'EmptyValue', NaN, 'ReturnOnError', false);

%% Remove white space around all cell columns.
dataArray{1} = strtrim(dataArray{1});
dataArray{2} = strtrim(dataArray{2});
dataArray{3} = strtrim(dataArray{3});
dataArray{4} = strtrim(dataArray{4});
dataArray{5} = strtrim(dataArray{5});
dataArray{6} = strtrim(dataArray{6});
dataArray{7} = strtrim(dataArray{7});
dataArray{8} = strtrim(dataArray{8});
dataArray{9} = strtrim(dataArray{9});
dataArray{10} = strtrim(dataArray{10});

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post processing code is included. To generate code which works for unimportable data, select unimportable cells in a file and regenerate the script.

%% Create output variable
env200logfile2 = table(dataArray{1:end-1}, 'VariableNames', {'Time','VarName4','VarName7','Byte0','Byte1','Byte2','Byte3','Byte4','Byte5','Byte6'});

%% Clear temporary variables
clearvars filename startRow formatSpec fileID dataArray ans;
%% CONVERT HEX BYTE STRINGS TO DECIMAL NUMBERS.
% each eteration of hexStr ->D -> candump converts a selected byte string into a decimal number, loading it into the candump.
% Clears the hexStr and D after.
hexStr=(candump.Byte0);
D=hex2dec(hexStr);
candump.Byte0=D;

hexStr=(candump.Byte1);
D=hex2dec(hexStr);
candump.Byte1=D;

hexStr=(candump.Byte2);
D=hex2dec(hexStr);
candump.Byte2=D;

hexStr=(candump.Byte3);
D=hex2dec(hexStr);
candump.Byte3=D;

hexStr=(candump.Byte4);
D=hex2dec(hexStr);
candump.Byte4=D;

hexStr=(candump.Byte5);
D=hex2dec(hexStr);
candump.Byte5=D;

hexStr=(candump.Byte6);
D=hex2dec(hexStr);
candump.Byte6=D;

hexStr=(candump.Byte7);
D=hex2dec(hexStr);
candump.Byte7=D;

clearvars hexStr D; 
%% HEX TO BINARY.

hexStr=(env200logfile2.Byte0)
D=dec2bin(hexStr)
candump.Byte0=D

hexStr=(env200logfile2.Byte1)
D=dec2bin(hexStr)
candump.Byte1=D

hexStr=(env200logfile2.Byte2)
D=dec2bin(hexStr)
candump.Byte2=D

hexStr=(env200logfile2.Byte3)
D=dec2bin(hexStr)
candump.Byte3=D

hexStr=(env200logfile2.Byte4)
D=dec2bin(hexStr)
candump.Byte4=D

hexStr=(env200logfile2.Byte5)
D=dec2bin(hexStr)
candump.Byte5=D

hexStr=(env200logfile2.Byte6)
D=dec2bin(hexStr)
candump.Byte6=D

hexStr=(env200logfile2.Byte7)
D=dec2bin(hexStr)
candump.Byte7=D

clearvars hexStr D;
